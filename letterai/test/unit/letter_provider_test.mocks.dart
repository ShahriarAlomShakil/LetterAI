// Mocks generated by Mockito 5.4.6 from annotations
// in letterai/test/unit/letter_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:letterai/models/letter.dart' as _i4;
import 'package:letterai/services/ai_service.dart' as _i6;
import 'package:letterai/services/storage_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i2.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Letter>> getLetters() =>
      (super.noSuchMethod(
            Invocation.method(#getLetters, []),
            returnValue: _i3.Future<List<_i4.Letter>>.value(<_i4.Letter>[]),
          )
          as _i3.Future<List<_i4.Letter>>);

  @override
  _i3.Future<void> saveLetter(_i4.Letter? letter) =>
      (super.noSuchMethod(
            Invocation.method(#saveLetter, [letter]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteLetter(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteLetter, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Letter?> getLetter(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getLetter, [id]),
            returnValue: _i3.Future<_i4.Letter?>.value(),
          )
          as _i3.Future<_i4.Letter?>);

  @override
  _i3.Future<List<_i4.Letter>> getLettersByCategory(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getLettersByCategory, [categoryId]),
            returnValue: _i3.Future<List<_i4.Letter>>.value(<_i4.Letter>[]),
          )
          as _i3.Future<List<_i4.Letter>>);

  @override
  _i3.Future<List<_i4.Letter>> getLettersBySubcategory(String? subcategoryId) =>
      (super.noSuchMethod(
            Invocation.method(#getLettersBySubcategory, [subcategoryId]),
            returnValue: _i3.Future<List<_i4.Letter>>.value(<_i4.Letter>[]),
          )
          as _i3.Future<List<_i4.Letter>>);

  @override
  _i3.Future<List<_i4.Letter>> getTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getTemplates, []),
            returnValue: _i3.Future<List<_i4.Letter>>.value(<_i4.Letter>[]),
          )
          as _i3.Future<List<_i4.Letter>>);

  @override
  _i3.Future<void> saveTemplate(_i4.Letter? template) =>
      (super.noSuchMethod(
            Invocation.method(#saveTemplate, [template]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTemplate, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveSettings(Map<String, dynamic>? settings) =>
      (super.noSuchMethod(
            Invocation.method(#saveSettings, [settings]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> exportLettersToJson() =>
      (super.noSuchMethod(
            Invocation.method(#exportLettersToJson, []),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#exportLettersToJson, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> importLettersFromJson(String? jsonString) =>
      (super.noSuchMethod(
            Invocation.method(#importLettersFromJson, [jsonString]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [AIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIService extends _i1.Mock implements _i6.AIService {
  MockAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConfigured =>
      (super.noSuchMethod(Invocation.getter(#isConfigured), returnValue: false)
          as bool);

  @override
  _i3.Future<String> generateLetterContent({
    required String? category,
    required String? subcategory,
    required String? prompt,
    String? tone = 'professional',
    int? maxTokens = 800,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateLetterContent, [], {
              #category: category,
              #subcategory: subcategory,
              #prompt: prompt,
              #tone: tone,
              #maxTokens: maxTokens,
            }),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#generateLetterContent, [], {
                  #category: category,
                  #subcategory: subcategory,
                  #prompt: prompt,
                  #tone: tone,
                  #maxTokens: maxTokens,
                }),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<List<String>> enhanceText({
    required String? text,
    required String? context,
    int? suggestionCount = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#enhanceText, [], {
              #text: text,
              #context: context,
              #suggestionCount: suggestionCount,
            }),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<Map<String, String>> generateLetterOutline({
    required String? category,
    required String? subcategory,
    required String? purpose,
    String? tone = 'professional',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateLetterOutline, [], {
              #category: category,
              #subcategory: subcategory,
              #purpose: purpose,
              #tone: tone,
            }),
            returnValue: _i3.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i3.Future<Map<String, String>>);

  @override
  _i3.Future<List<_i6.WritingSuggestion>> checkGrammarAndStyle(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#checkGrammarAndStyle, [text]),
            returnValue: _i3.Future<List<_i6.WritingSuggestion>>.value(
              <_i6.WritingSuggestion>[],
            ),
          )
          as _i3.Future<List<_i6.WritingSuggestion>>);

  @override
  _i3.Future<List<String>> generateTemplates({
    required String? category,
    required String? subcategory,
    int? templateCount = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateTemplates, [], {
              #category: category,
              #subcategory: subcategory,
              #templateCount: templateCount,
            }),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  String getFallbackContent(String? subcategory) =>
      (super.noSuchMethod(
            Invocation.method(#getFallbackContent, [subcategory]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getFallbackContent, [subcategory]),
            ),
          )
          as String);
}
